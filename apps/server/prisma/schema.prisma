// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  username        String   @unique
  password        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isEmailVerified Boolean  @default(false)

  // relationships
  pushToken      PushToken?     @relation("UserPushToken")
  currentSession Session?       @relation("UserCurrentSession")
  MoodLogs       MoodLog[]      @relation("UserMoodLog")
  JournalEntries JournalEntry[] @relation("UserJournalEntry")

  dailyCheckIn DailyCheckIn[]
}

model Session {
  token     String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  updatedAt DateTime @updatedAt

  user User @relation("UserCurrentSession", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, token])
}

model PushToken {
  userId    String   @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation("UserPushToken", fields: [userId], references: [id], onDelete: Cascade)
}

model MoodLog {
  id           Int      @id @default(autoincrement())
  userId       String
  stressScale  Int
  anxietyScale Int
  sadnessScale Int
  stressNote   String?
  anxietyNote  String?
  sadnessNote  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  journalEntryId Int?
  JournalEntry   JournalEntry? @relation("MoodLogJournalEntry")

  user         User          @relation("UserMoodLog", fields: [userId], references: [id], onDelete: Cascade)
  DailyCheckIn DailyCheckIn? @relation("DailyCheckInMoodLog")

  @@index([userId, createdAt])
}

model JournalEntry {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  moodFace  Int
  tags      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  moodLogId Int?     @unique
  moodLog   MoodLog? @relation("MoodLogJournalEntry", fields: [moodLogId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("UserJournalEntry", fields: [userId], references: [id], onDelete: Cascade)
}

model DailyCheckIn {
  userId      String
  date        DateTime
  broadcasted Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relationships
  moodLogId Int?     @unique
  MoodLog   MoodLog? @relation("DailyCheckInMoodLog", fields: [moodLogId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, date])
}
